from datetime import datetime, timezone
import urllib.parse
import random
import pytz


def trim_len(string, max_len):
    return string if len(string) <= max_len else string[:max_len - 1] + "‚Ä¶"


# def format_toop(chart_name, players):
#     rows = ["```"]
#     rows.append(chart_name.upper())
#     rows.append("")
#     rows.append("    PLAYER          LANGUAGE  W.R. SCORE")
#     rows.append("----------------------------------------")
#     for i, player in enumerate(players):
#         rows.append("{}{}{}{}{}".format(
#             str(i + 1).ljust(4),
#             trim_len(player.username, 16).ljust(16),
#             player.language.ljust(9),
#             player.winrate.rjust(5),
#             player.score.rjust(6)
#         ))
#     rows.append("```")
#     return "\n".join(rows)


def format_top(chart_name, scores, horse_logins=None, header=True):
    if horse_logins is None:
        horse_logins = set()
    rows = ["```"]
    if header:
        rows.append(chart_name.upper())
        rows.append("")
        rows.append("    PLAYER     SCORE")
        rows.append("--------------------")
    for score in scores:
        login = trim_len(score['user']['login'], 10)
        rows.append("{}{}{}".format(
            str(score['rank']).ljust(4),
            login.ljust(11),
            "{:.3f}".format(score['score']).rjust(5)
        ))
        if score['user']['login'] in horse_logins:
            rows[-1] += " üê¥"
    rows.append("```")
    return "\n".join(rows)


# def format_poos(chart_name, players):
#     rows = ["```"]
#     for i, player in players:
#         rows.append("{}{}{}{}{}".format(
#             str(i + 1).ljust(4),
#             trim_len(player.username, 16).ljust(16),
#             player.language.ljust(9),
#             player.winrate.rjust(5),
#             player.score.rjust(6)
#         ))
#     rows.append("```")
#     return "\n".join(rows)


def chat_logins(logins):
    msg = "CUPS –õ–æ–≥–∏–Ω—ã —á–∞—Ç–∞: `"
    if logins:
        msg += ", ".join(sorted(logins))
    else:
        msg += "–°–ü–ò–°–û–ö –ü–£–°–¢"
    msg += "`"
    return msg


# def format_pos(chart_name, players):
#     rows = ["```"]
#     for i, player in players:
#         rows.append("{}{}{}".format(
#             str(i + 1).ljust(4),
#             trim_len(player.username, 11).ljust(11),
#             player.score.rjust(5)
#         ))
#     rows.append("```")
#     return "\n".join(rows)


# def format_solutions(solutions):
#     rows = ["```"]
#     for sol in solutions:
#         t=0
#         # rows.append("{}{}{}".format(
#         #     str(i + 1).ljust(4),
#         #     trim_len(player.username, 11).ljust(11),
#         #     player.score.rjust(5)
#         # ))
#     rows.append("```")
#     return "\n".join(rows)


def td2s(td):
    return str(td).split(".")[0]


def format_chat_info(contest=None, task=None) -> str:
    lines = []
    if contest:
        lines.append(f"–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ: `{contest['name']}`")

        now = datetime.now(timezone.utc)
        start_date = datetime.fromisoformat(contest['start_date'])
        end_date = datetime.fromisoformat(contest['finish_date'])
        if start_date > now:
            lines.append(f"–ù–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑: `{td2s(start_date - now)}`")
        elif end_date > now:
            lines.append(f"–ó–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑: `{td2s(end_date - now)}`")
        else:
            lines.append("`–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å.`")

        lines.append("")
        cround = None
        for r in contest['round_set']:
            start_date = datetime.fromisoformat(r['start_date'])
            end_date = datetime.fromisoformat(r['finish_date'])
            if end_date > now:
                cround = r
                break
        if cround:
            lines.append(f"–†–∞—É–Ω–¥: `{cround['name']}`")
            if start_date > now:
                lines.append(f"–ù–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑: `{td2s(start_date - now)}`")
            else:
                lines.append(f"–ó–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑: `{td2s(end_date - now)}`")
            lines.append("")

        if task:
            lines.append(f"–ó–∞–¥–∞—á–∞: `{task['name']}`")
        else:
            lines.append(f"–ó–∞–¥–∞—á–∞: `–ù–ï –í–´–ë–†–ê–ù–ê, –õ–ò–î–ï–†–ë–û–†–î –ù–ï–î–û–°–¢–£–ü–ï–ù`")
    else:
        lines.append("–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ: `–ù–ï –í–´–ë–†–ê–ù–û`")
    return '\n'.join(lines)


import random

win_phrases = [
    "–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏",
    "–¢—ã –∏–¥–µ—à—å —Ö–æ—Ä–æ—à–æ",
    "–≠—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å",
    "–¢—ã —Ö–æ—Ä–æ—à–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª",
    "–£–ª—ã–±–Ω–∏—Å—å!",
    "–í–æ—Ç —ç—Ç–æ –¥–∞!",
    "–ù–∏—Ñ–∏–≥–∞ —Å–µ–±–µ!",
    "üî•üî•üî•",
    "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
    "–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
    "mortido –º–æ–∂–µ—Ç –ª—É—á—à–µ",
    "–ù–µ –∑–∞–∑–Ω–∞–≤–∞–π—Å—è",
    "–¢—ã –º–æ–∂–µ—à—å –µ—â–µ –ª—É—á—à–µ!",
    "–ö–∞–∫ —Ç—ã —Ö–æ—Ä–æ—à!",
    "–ö–∞–∫ —Å–∏–ª—å–Ω—ã —Ç–≤–æ–∏ –ª–∞–ø–∏—â–∏!",
    "–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏",
    "–ë–∞—Ö! –¢—ã—â! –ë—É–º!",
    "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –∏–¥—ë—à—å –∫ –ø–æ–±–µ–¥–µ!",
    "–£ —Ç–µ–±—è –∑–¥–æ—Ä–æ–≤–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è!",
    "–ß–µ–º –≤—ã—à–µ –ø–æ–¥–Ω–∏–º–∞–µ—à—å—Å—è - —Ç–µ–º –±–æ–ª—å–Ω–µ–µ –ø–∞–¥–∞—Ç—å.",
    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —ç—Ç–æ –∑–∞—Å–ª—É–∂–µ–Ω–Ω–∞—è –ø–æ–±–µ–¥–∞, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ–∑–ª–æ?",
    "–£–≤–µ—Ä–µ–Ω–Ω–æ.",
    "Like a boss.",
    "–Ø –±—ã –∏ —Å–∞–º –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞–ª, –Ω–æ –¥–æ —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞ –º–Ω–µ –¥–∞–ª–µ–∫–æ.",
    "–ñ–≥–∏, –≥—Ä–∞–±—å, –¥–æ–º–∏–Ω–∏—Ä—É–π!",
    "–î–µ—Ä–∂–∏ `1u + pos.x + width_ * (1u + pos.y)` - —ç—Ç–æ –∫—É—Å–æ–∫ –∫–æ–¥–∞ mortido, –æ–Ω –ø—Ä–∏–Ω–æ—Å–∏—Ç segfault'—ã",
    "–ê —Ç—ã –ª—é–±–∏—à—å –ª–æ—à–∞–¥–µ–π?",
    "–ò–≥–æ–≥–æ!",
    "–¢—ã –∑–∞—Å–ª—É–∂–∏–ª —á–∞—à–µ—á–∫—É —á–∞—è",
]

win_using_rust_phrases = [
    *win_phrases,
    "ü¶Ä",
]

loose_using_rust_phrases = [
    "–ë—ã–≤–∞–µ—Ç –∏ —Ö—É–∂–µ",
    "–°–ª–µ–∑–∞–º–∏ –≥–æ—Ä—é –Ω–µ –ø–æ–º–æ–∂–µ—à—å",
    "–ù–∞ —ç—Ç–æ–π –∏–≥—Ä–µ —Å–≤–µ—Ç –∫–ª–∏–Ω–æ–º –Ω–µ —Å–æ—à–µ–ª—Å—è",
    "–ó–∞—Ç–æ —Ç—ã –≤–µ—Å–µ–ª—ã–π",
    "–¢–≤–æ—è –º–∞–º–∞ —Ç–µ–±—è –ª—é–±–∏—Ç",
    "–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫—É –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ–∑–ª–æ",
    "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª –±–∏—Ç–≤—É, –Ω–æ –Ω–µ –ø—Ä–æ–∏–≥—Ä–∞–ª –≤–æ–π–Ω—É",
    "–≠—Ç–æ –Ω–µ –∫–æ–Ω–µ—Ü —Å–≤–µ—Ç–∞",
    "Commandos —Ç–æ–∂–µ —Ç–µ—Ä–ø–µ–ª –ø–æ—Ä–∞–∂–µ–Ω–∏—è",
    "–ù–µ—Ç —Ö—É–¥–∞ –±–µ–∑ –¥–æ–±—Ä–∞",
    "–ù–µ —Å–¥–∞–≤–∞–π—Å—è!",
    "–î–∞–≤–∞–π, —Ç—ã –º–æ–∂–µ—à—å!",
    "–í—ã—à–µ –≥–æ–ª–æ–≤—É!",
    "–ù–µ –≤–µ—à–∞–π –Ω–æ—Å!",
    "–ù–µ —É–Ω—ã–≤–∞–π!",
    "–í–æ–æ–±—â–µ —Å–µ–π—á–∞—Å –µ—Å—Ç—å –º–Ω–æ–≥–æ —Å–µ–≤—Ä–≤–∏—Å–æ–≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏ –æ–Ω–ª–∞–π–Ω.",
    "–ù–µ... –Ω—É —ç—Ç–æ —Å–æ–≤—Å–µ–º —Ö—Ä–µ–Ω–æ–≤–∞—è –∏–≥—Ä–∞...",
    "–ú—ã –µ–≥–æ –∑–∞–ø–æ–º–Ω–∏–º –∏ –æ—Ç–æ–º—Å—Ç–∏–º",
    "–î–∞–≤–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å —Å–æ–∂–∂–µ–º?",
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞... –ù—É –∏ –Ω–µ –Ω—É–∂–Ω–æ...",
    "–î–µ—Ä–∂–∏ `for (auto &entity : workers){` - —ç—Ç–æ –∫—É—Å–æ–∫ –∫–æ–¥–∞ Commandos'a, –æ–Ω –ø—Ä–∏–Ω–æ—Å–∏—Ç —É–¥–∞—á—É",
    "–£ –≤—Å–µ—Ö –±—ã–≤–∞—é—Ç –æ—Å–µ—á–∫–∏.",
    "–•–æ—Ä–æ—à–æ, –∫–æ–≥–¥–∞ –µ—Å—Ç—å, –∫ —á–µ–º—É —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è.",
    "–ö–∞–∂–¥–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å–∏–ª—å–Ω–µ–µ.",
    "–ö–∞–∂–µ—Ç—Å—è, –Ω—É–∂–Ω–∞ –µ—â—ë –ø–∞—Ä–∞ –∏—Ñ–æ–≤...",
    "–•–º... –ø–æ—Å–º–æ—Ç—Ä–∏—à—å, –ø–æ—á–µ–º—É —Ç–∞–∫ –≤—ã—à–ª–æ?",
    "–õ—É—á—à–µ –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º ‚Äî –ø–µ—Ä–≤—ã–º, —á–µ–º –ø–µ—Ä–≤—ã–º ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–º",
    "–õ–µ–≥–∫–æ –≤—Å—Ç–∞–≤–∞—Ç—å, –∫–æ–≥–¥–∞ —Ç—ã –Ω–µ –ª–æ–∂–∏–ª—Å—è.",
    "–ò–Ω–æ–≥–¥–∞ –∂–∏–∑–Ω—å ‚Äî —ç—Ç–æ –∂–∏–∑–Ω—å, –∞ —Ç—ã –≤ –Ω–µ–π –∏–Ω–æ–≥–¥–∞.",
    "–õ—É—á—à–µ –æ–¥–∏–Ω —Ä–∞–∑ —É–ø–∞—Å—Ç—å, —á–µ–º —Å—Ç–æ —Ä–∞–∑ —É–ø–∞—Å—Ç—å.",
    "–ï—Å–ª–∏ —Ç—ã –Ω–µ –≤–∏–¥–∏—à—å, –∑–Ω–∞—á–∏—Ç —Ç—ã —Å–ª–µ–ø–æ–π.",
    "–ó–∞–ø–æ–º–Ω–∏, –∞ —Ç–æ –∑–∞–±—É–¥–µ—à—å.",
    "–ë—É–¥—å —Å–∏–ª—å–Ω—ã–º.",
    "–ü—Ä–æ–∏–≥—Ä–∞—Ç—å - —ç—Ç–æ –∫–∞–∫ –ø–æ–±–µ–¥–∏—Ç—å, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞—Ç—å.",
    "–ó–∞—Ç–æ —Ç—ã –ª—É—á—à–µ –∏—Ö –≤ —á–µ–º-—Ç–æ –¥—Ä—É–≥–æ–º, –Ω–æ —ç—Ç–æ –Ω–µ —Ç–æ—á–Ω–æ.",
    "–≠—Ç–æ –∫–∞–∫–æ–µ-—Ç–æ –≥–æ–≤–Ω–æ",
    "–î–∞–≤–∞–π —Ç–∞–∫ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–ª–∞—Ç—å.",
    "–ü—Ä–µ–¥–ª–∞–≥–∞—é –æ—Ç–∫–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ.",
    "–ù–∞—Ñ–∏–≥ —ç—Ç–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ if'–æ–≤",
    "–ö–µ–º –±—ã —Ç—ã –Ω–∏ –±—ã–ª, –∫–µ–º –±—ã —Ç—ã –Ω–µ —Å—Ç–∞–ª, –ø–æ–º–Ω–∏, –≥–¥–µ —Ç—ã –±—ã–ª –∏ –∫–µ–º —Ç—ã —Å—Ç–∞–ª.",
    "–î–µ–ª–∞–π –∫–∞–∫ –Ω–∞–¥–æ, –∫–∞–∫ –Ω–µ –Ω–∞–¥–æ –Ω–µ –¥–µ–ª–∞–π.",
    "–î–µ—Ä–∂–∏ [—Å—Å—ã–ª–∫—É](https://github.com/core2duo/RHC-AI)"
]

loose_phrases = [
    *loose_using_rust_phrases,
    "–ü–æ–ø—Ä–æ–±—É–π —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
]

def format_battles(name, cups_login, battles):
    cups_login = cups_login.lower()
    rows = []
    for battle in battles:
        replay_url = "https://cups.online" + battle['visualizer_url'] + "?"
        for br in battle['battle_results']:
            replay_url += f"&player-names=" + urllib.parse.quote(br['user']['login'])
            replay_url += f"&client-ids=" + urllib.parse.quote(str(br['solution']['external_id']))
        replay_url += f"&replay=" + urllib.parse.quote(battle['battle_result_file'])
        rows.append(f"Game: ` {battle['id']}".ljust(25) + f"` [REPLAY]({replay_url})")
        created_at = datetime.fromisoformat(battle['created_at'])
        created_at = created_at.astimezone(pytz.timezone("Europe/Moscow"))
        rows.append(f"Created:  `{created_at.strftime('%m/%d/%Y %H:%M:%S MSK')}`")
        rows.append("```")
        scores = sorted(battle['battle_results'], key=lambda x: x['score'], reverse=True)
        for s in scores:
            login = s['user']['login']
            if cups_login in s['user']['login'].lower():
                login = "* " + login

            rows.append("{}[{}]{}".format(
                trim_len(login, 15).ljust(16),
                s['solution']['id'],
                str(int(s['score'])).rjust(6)
            ))

        rows.append("```")
        rows.append("")

    return "\n".join(rows)


def format_game(battle, name, scores, my_lb, win_flag, solution):
    # win = int(game.deltas[player_idx]) > 0
    # rows = [random.choice(win_phrases if win else loose_phrases),
    #         f"http://russianaicup.ru/game/view/{game.gid}",
    # Œî
    game_type = "üèÜ RANKED" if battle['is_ranked'] else "ü§° CUSTOM"
    rows = [
        # f"{name.ljust(30)}     SCORE    Œî   LB"]
        f"`{name.ljust(30)}`",
        f"Game:  `{battle['id']}  {game_type}`",
        f"SOLUTION ID:  `{solution}`",
        "LB:  `{}`   Score:  `{:.3f}`".format(my_lb['rank'], my_lb['score']),
        "",
        "```",
    ]

    my_login = ""
    my_lang = ""
    all_logins = {}
    for s in scores:
        login = "* " + s['login'] if s['sub_flag'] else s['login']
        if s['sub_flag']:
            my_login = s['login']
            my_lang = s['language']
        all_logins[s['login']] = max(all_logins.get(s['login'], 0), s['score'])
        rows.append("[{}] {}{}{}".format(
            str(s['lb_rank']).rjust(3),
            trim_len(login, 10).ljust(11),
            trim_len(s['language'], 7).ljust(8),
            str(int(s['score'])).rjust(6)
        ))
    rows.append("```")

    if my_lang.startswith('Rust'):
        rows.append(random.choice(win_using_rust_phrases) if win_flag else random.choice(loose_using_rust_phrases))
    else:
        rows.append(random.choice(win_phrases) if win_flag else random.choice(loose_phrases))
    return "\n".join(rows)
